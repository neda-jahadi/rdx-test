{"version":3,"sources":["features/counter.js","components/Counter.jsx","features/profile.js","components/Profile.jsx","features/mytest.js","components/Mytest.jsx","App.js","serviceWorker.js","features/rootReducer.js","index.js"],"names":["increase","createAction","decrease","actions","reducer","createReducer","state","action","Counter","dispatch","useDispatch","value","useSelector","counter","myList","mytest","list","className","onClick","changeAlias","changeName","changeEmail","resetProfile","alias","name","email","payload","Profile","useState","setAlias","setName","setEmail","count","type","onChange","e","target","changeMyname","changeMyLastname","filterList","myName","myLastname","filter","toLowerCase","includes","Mytest","setMyName","setMyLastname","App","profile","myCount","Boolean","window","location","hostname","match","rootReducer","combineReducers","counterReducer","profileReducer","mytestReducer","store","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.65454676.chunk.js","sourcesContent":["import { createAction, createReducer } from '@reduxjs/toolkit';\r\n\r\n// Feature file: counter\r\n// This file creates actions and a reducer.\r\n\r\n// We can use any string as ACTION TYPE\r\nconst increase = createAction('increase counter');\r\nconst decrease = createAction('decrease counter');\r\n\r\n// Collect our actions in an object, so we don't need to export each action individually\r\nconst actions = { increase, decrease };\r\n\r\n\r\n// The initial state of the feature. A counter only need a value, so it's the simplest possible state.\r\nconst initialState = 10;\r\n\r\n// The reducer should handle our actions. (It can also handle actions from other features if we import them.)\r\nconst reducer = createReducer(initialState, {\r\n    [increase]: (state, action) => state + 1,\r\n    [decrease]: (state, action) => state - 1\r\n})\r\n\r\n/*  createReducer creates a function that looks like this:\r\n(state, action) => {\r\n    switch( action.type ) {\r\n        case 'increase counter':\r\n            return state + 1;\r\n        case 'decrease counter':\r\n            return state - 1;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n*/\r\n\r\nexport { actions, reducer };","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { actions } from '../features/counter';\r\n\r\n// Component that uses the global state (from the Redux store)\r\nconst Counter = () => {\r\n    const dispatch = useDispatch();\r\n    const value = useSelector(state => state.counter);\r\n    const myList = useSelector(state =>state.mytest.list);\r\n    const increase = () => dispatch(actions.increase());\r\n    const decrease = () => dispatch(actions.decrease());\r\n    return (\r\n        <div className=\"border\">\r\n            Value: {value} (React with Redux, state in store)<br/>\r\n            <button onClick={increase}>Increase</button>\r\n            <button onClick={decrease}>Decrease</button>\r\n            <h2>show list here!{myList}</h2>\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Counter;","import { createAction, createReducer } from '@reduxjs/toolkit';\r\n\r\n\r\nconst changeAlias = createAction('change alias');\r\nconst changeName = createAction('change name');\r\nconst changeEmail = createAction('change email');\r\nconst resetProfile = createAction('reset user profile');\r\n\r\nconst actions = { changeAlias, changeName, changeEmail, resetProfile };\r\n\r\n\r\nconst initialState = {\r\n    alias: '',\r\n    name: '',\r\n    email: ''\r\n}\r\n\r\nconst reducer = createReducer(initialState, {\r\n    [changeAlias]: (state, action) => (\r\n        { ...state, alias: action.payload }\r\n    ),\r\n    [changeName]: (state, action) => (\r\n        { ...state, name: action.payload }\r\n    ),\r\n    [changeEmail]: (state, action) => (\r\n        { ...state, email: action.payload }\r\n    ),\r\n\r\n    // Alternativ lÃ¶sning\r\n    // [changeAll]: (state, action) => (\r\n    //     {\r\n    //         alias: action.payload.alias,\r\n    //         name: action.payload.name,\r\n    //         email: action.payload.email\r\n    //     }\r\n    // )\r\n})\r\n\r\n\r\nexport { actions, reducer };","import React, { useState } from 'react';\r\nimport { useDispatch,useSelector } from 'react-redux';\r\nimport { actions } from '../features/profile';\r\n\r\nconst Profile = () => {\r\n    const dispatch = useDispatch();\r\n    const [alias, setAlias] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const count = useSelector(state => state.counter);\r\n\r\n    // const saveAlias = () => dispatch(actions.changeAlias(alias));\r\n\r\n    const handleSave = () => {\r\n        dispatch(actions.changeAlias(alias))\r\n        dispatch(actions.changeName(name))\r\n        dispatch(actions.changeEmail(email))\r\n    }\r\n\r\n    return (\r\n        \r\n        <div className=\"border\">\r\n            <h3>User profile</h3>\r\n            <div>\r\n                Alias:\r\n                <input type=\"text\" value={alias}\r\n                    onChange={e => setAlias(e.target.value)} />\r\n                    \r\n            </div>\r\n            <div>\r\n                Real name:\r\n                <input type=\"text\" value={name}\r\n                    onChange={e => setName(e.target.value)} />\r\n            </div>\r\n            <div>\r\n                Email address:\r\n                <input type=\"email\" value={email}\r\n                    onChange={e => setEmail(e.target.value)} />\r\n            </div>\r\n            <button onClick={handleSave}>Save</button>\r\n            <button>Reset</button>\r\n             {count}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import { createAction, createReducer } from '@reduxjs/toolkit';\r\nconst changeMyname = createAction('change my name');\r\nconst changeMyLastname = createAction('change my last name');\r\nconst filterList = createAction('filter my list');\r\nconst actions = {changeMyname,changeMyLastname,filterList};\r\n\r\nconst initialState = {myName:'',myLastname:'',list:[]}\r\n    \r\nconst reducer = createReducer(initialState, {\r\n    [changeMyname]: (state, action) => (\r\n        { ...state, myName: action.payload }\r\n    ),\r\n    [changeMyLastname]: (state, action) => (\r\n        { ...state, myLastname: action.payload }\r\n    ),\r\n    [filterList]: (state, action) => (\r\n        { ...state, list: action.payload.filter(name=> name.toLowerCase().includes('n'.toLowerCase())) }\r\n    ),\r\n    \r\n})\r\n\r\nexport { actions, reducer };\r\n\r\n    \r\n    \r\n\r\n","import React, {useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {actions} from '../features/mytest';\r\nconst Mytest = () =>{\r\n    let list = ['neda','nima','lili','lia'];\r\n    const dispatch = useDispatch();\r\n    const [myName,setMyName] = useState('');\r\n    const [myLastname,setMyLastname] = useState('');\r\n    const handleName = () => {\r\n        dispatch(actions.changeMyname(myName))\r\n        dispatch(actions.changeMyLastname(myLastname))\r\n        \r\n    }\r\n    const handleFilter = () => dispatch(actions.filterList(list));\r\n\r\n    \r\n    \r\n    return (\r\n        <div>\r\n            <input type=\"text\" value={myName} onChange = {e => setMyName(e.target.value)} />\r\n            <input type=\"text\" value={myLastname} onChange = {e => setMyLastname(e.target.value)} />\r\n            \r\n            <button onClick={handleName}>Name me!</button>\r\n            <button onClick={handleFilter}>Filter list!</button>\r\n            \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Mytest;\r\n","import React from 'react';\nimport './App.css';\n\nimport Counter from './components/Counter';\nimport Profile from './components/Profile';\nimport Mytest from './components/Mytest';\nimport { useSelector } from 'react-redux';\n\nfunction App() {\n    const alias = useSelector(state => state.profile.alias);\n    const myName = useSelector(state => state.mytest.myName);\n    const myLastname = useSelector(state =>state.mytest.myLastname);\n    const myCount = useSelector(state=> state.counter);\n    return (\n        <div className=\"App\">\n        <header className=\"App-header\">\n            <h1> React Redux demo </h1>\n        </header>\n        <main>\n            <h3>Welcome, {myName} {myLastname}:)</h3>\n            <h2>Welcome, {alias}!</h2>\n            <Profile />\n            <br/>\n           <h3>Counter is here:</h3>\n            <Counter />\n            <h3>Mytest is here:</h3>\n            <Mytest />\n            {myCount}\n           \n        </main>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\r\n\r\nimport { reducer as counterReducer } from './counter';\r\nimport { reducer as profileReducer } from './profile';\r\nimport {reducer as mytestReducer} from './mytest';\r\n\r\n// The purpose of rootReducer is to combine all our feature reducers into a single reducer\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer,\r\n    profile: profileReducer,\r\n    mytest: mytestReducer\r\n})\r\n\r\nexport { rootReducer };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Configure the Redux store\nimport { Provider } from 'react-redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport { rootReducer } from './features/rootReducer';\n\nconst store = configureStore({\n    reducer: rootReducer\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}> <App /> </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}